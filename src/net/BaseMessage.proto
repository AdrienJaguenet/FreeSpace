syntax = "proto2";

//Speed > Code size. May need to change to Lite if we go for phones
option optimize_for = SPEED;
//We dont need services, this isnt an RPC library
option cc_generic_services = false;

//Need to split this into 2 schemas (client-server) at least
enum MessageType {
  Hello = 1;
  Disconnect = 2;
  UpdateEntity = 3;
};

message Base {
  optional MessageType messageType = 1;
  optional bytes msg = 2;
}

//We probably need to send server->client frequently/every update:
//-EntityID
//-Movement status (decouple from input?)
//-Physics components + Colliders (server-side collisions?)
message PhysicsComponentUpdate {	//Will probably need optimization
	optional float yaw = 1;
	optional float radius = 2;
	optional float speed = 3;
	optional bool isColliding = 4;
	optional float velX = 5;
	optional float velY = 6;
	optional float posX = 7;
	optional float posY = 8;
}

//-Projectiles
message ProjectileComponentUpdate {
	//Possible optimization: We can have an enum determining if an entity is a projectile or not. 
	//Else we just check if this optional message field is set
	optional int32 damage = 1;
	optional int32 originEntity = 2;
}
//-Resource site updates
message ResourceTypeUpdate {		//Meh name
	optional string resourceType = 1; 	//SHOULD BE AN ENUM
	optional int32 resourceStrength = 2;
}
message ResourceComponentUpdate {
	repeated ResourceTypeUpdate resourceType = 1;
}

//-Health components
message HealthComponentUpdate {
	optional int32 hp = 1;
	optional int32 maxHp = 2;
}
//-Effects if implemented (cooldown, thrust trails+thrusting status, etc)

message UpdatedEntity {
	//What should be updated per entity
	enum UpdateType {
	  CREATE = 1;
	  UPDATE = 2;
	  DELETE = 3;
	}
	optional int32 entityID = 1;
	optional HealthComponentUpdate health = 2;
	optional PhysicsComponentUpdate physics = 3;
	optional ResourceComponentUpdate resource = 16;
	optional ProjectileComponentUpdate projectile = 17;
}

message UpdatedEntityList {
	repeated UpdatedEntity entities = 1;
}

//We need to handle server->client updates of:
//-Team switching
//-Graphics (probably just send a resource ID)
//-Damage (to others? to current player?)
//-Ship parts changing (retrofit, etc)

//We may want to handle server->client updates of:
//-Out-of-res sf::Images (player-made emblems, etc). Can be gzipped from uint8 to repeated bytes or string 

//message QuitEvent
//message Ping
//message Pong
//message PlayerChatMessage
//message PlayerPrivateMessage
